# Global configurations
global:
  env:
    production: false  # Set the environment to production (true) or development (false)

  baseUrls:
    api: ""  # Set the base URL for the API

replicaCount: 1

image:
  repository: ghcr.io/ever-co/gauzy-api-demo
  pullPolicy: IfNotPresent
  tag: "latest"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
envs: []
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# app configurations
loglevel: "info"  # Set the log level to "info"

# Enable or disable admin password reset feature
adminPasswordReset: true

# Allow or disallow users with super admin role
allowSuperAdminRole: true

# Sentry configuration for API
sentry:
  sentryDsn: ""  # Insert your Sentry DSN (Data Source Name) here
  sentryHttpTracingEnabled: false  # Enable or disable Sentry HTTP tracing
  sentryPostgresTrackingEnabled: false  # Enable or disable Sentry Postgres tracking

# JWT (JSON Web Token) configuration
jwt:
  jwtSecret: "changeMe"  # Set the secret key for JWT, replace "changeMe" with a secure key
  jwtRefreshTokenSecret: "changeMe"  # Set the refresh token secret, replace "changeMe" with a secure key
  jwtRefreshTokenExpirationTime: "86400"  # Set the expiration time for JWT refresh tokens in seconds (e.g., 86400 seconds = 1 day)

# API configurations for S3
s3:
  awsAccessKeyId: ""  # Provide the AWS Access Key ID
  awsSecretAccessKey: ""  # Provide the AWS Secret Access Key
  awsRegion: ""  # Specify the AWS region
  awsS3Bucket: ""  # Specify the AWS S3 bucket name

# API configurations for Wasabi S3
wasabiS3:
  wasabiAccessKeyId: ""  # Provide the Wasabi Access Key ID
  wasabiSecretAccessKey: ""  # Provide the Wasabi Secret Access Key
  wasabiRegion: ""  # Specify the Wasabi region
  wasabiServiceUrl: ""  # Provide the Wasabi Service URL if applicable
  wasabiS3Bucket: ""  # Specify the Wasabi S3 bucket name

# App configurations for mail
mailConfig:
  mailFromAddress: ""  # Set the email address used in the 'From' field
  mailHost: ""  # Specify the mail server host
  mailPort: ""  # Specify the mail server port
  mailUserName: ""  # Provide the username for mail authentication if required
  mailPassword: ""  # Provide the password for mail authentication if required

# Google Authentication configurations
googleAuth:
  gClientId: ""  # Provide the Google Client ID
  gClientSecret: ""  # Provide the Google Client Secret
  gCallbackUrl: ""  # Specify the callback URL for Google authentication

# Facebook Authentication configurations
facebookAuth:
  fbClientId: ""  # Provide the Facebook Client ID
  fbClientSecret: ""  # Provide the Facebook Client Secret
  fbGraphVersion: ""  # Specify the Facebook Graph API version
  fbCallbackUrl: ""  # Specify the callback URL for Facebook authentication

# Gauzy AI configurations
gauzyAi:
  graphqlEndpoint: ""  # Specify the GraphQL endpoint for Gauzy AI
  restEndpoint: ""  # Specify the REST endpoint for Gauzy AI

# Unleash feature toggle configurations
unleash:
  unleashAppName: ""  # Specify the Unleash application name
  unleashApiUrl: ""  # Specify the Unleash API URL
  unleashInstanceId: ""  # Specify the Unleash instance ID
  unleashRefreshInterval: ""  # Specify the Unleash refresh interval
  unleashMatricsInterval: ""  # Specify the Unleash metrics interval
  unleashApiKey: ""  # Specify the Unleash API key
  
# PM2 configurations
pm2:
  pm2PublicKey: ""  # Provide the PM2 public key
  pm2SecretKey: ""  # Provide the PM2 secret key
  pm2MachineName: ""  # Specify the PM2 machine name

# Jitsu configurations
jitsu:
  serverUrl: ""  # Specify the Jitsu server URL
  serverWriteKey: ""  # Specify the Jitsu server write key

# GitHub configurations
gitHub:
  githubClientId: ""  # Provide the GitHub Client ID
  githubClientSecret: ""  # Provide the GitHub Client Secret
  githubWebhookUrl: ""  # Specify the GitHub webhook URL
  githubWebhookSecret: ""  # Specify the GitHub webhook secret
  githubAppPrivateKey: ""  # Provide the GitHub App private key
  githubAppId: ""  # Provide the GitHub App ID
  githubAppName: ""  # Specify the GitHub App name
  githubCallbackUrl: ""  # Specify the GitHub callback URL
  githubPostInstallUrl: ""  # Specify the GitHub post-installation URL

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  global:
    ## @param global.imageRegistry Global Docker image registry
    ##
    # Uses external db endpoint when set to true else it uses database provisioned within the cluster.
    external_db: true

    imageRegistry: ""
    ## @param global.imagePullSecrets Global Docker registry secret names as an array
    ## e.g.
    ## imagePullSecrets:
    ##   - myRegistryKeySecretName
    ##
    imagePullSecrets: []
    ## @param global.storageClass Global StorageClass for Persistent Volume(s)
    ##
    storageClass: ""
    postgresql:
      ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
      ## @param global.postgresql.auth.host Host of a custom database to connect to (overrides `auth.host`)
      ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
      ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
      ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
      ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
      ## @param global.postgresql.auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.replicationPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ##
      auth:
        postgresPassword: ""
        host: ""
        username: ""
        password: ""
        database: ""
        existingSecret: ""
        secretKeys:
          adminPasswordKey: ""
          userPasswordKey: ""
          replicationPasswordKey: ""
      ## @param global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
      ##
      service:
        ports:
          postgresql: ""
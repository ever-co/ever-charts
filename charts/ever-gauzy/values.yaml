# Global configurations
global:
  env:
    production: false  # Set the environment to production (true) or development (false)

  baseUrls:
    api: ""  # Set the base URL for the API
    client: ""  # Set the base URL for the clien

webapp:
  replicaCount: 1
  image:
    repository: ghcr.io/ever-co/gauzy-webapp-demo
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  envs: []
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  
  # App configurations

  # Configurations for Cloudinary
  cloudinary:
    apiKey: ""  # Insert your Cloudinary API key here
    cloudName: ""  # Insert your Cloudinary cloud name here

  # Configurations for Google Maps
  googleMap:
    apiKey: ""  # Insert your Google Maps API key here
    autoComplete: true  # Enable or disable the auto-complete feature
    defaultLatitude: "42.6459136"  # Set the default latitude for map center
    defaultLongitude: "23.3332736"  # Set the default longitude for map center
    defaultCurrency: "USD"  # Set the default currency for location

  # Configurations for GitHub app
  gitHub:
    clientId: ""  # Insert your GitHub client ID here
    appName: ""  # Specify the name of your GitHub app
    redirectUrl: ""  # Insert the redirect URL for GitHub authentication
    postInstallUrl: ""  # Specify the URL to redirect to after GitHub app installation
    appId: ""  # Insert your GitHub app ID here

  # Configurations for Jitsu
  jitsu:
    browserUrl: ""  # Insert the Jitsu browser URL here
    browserWriteKey: ""  # Insert the Jitsu browser write key here


  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80
    targetPort: 4200

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}
  
api:
  replicaCount: 1

  image:
    repository: ghcr.io/ever-co/gauzy-api-demo
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  envs: []
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  
  # app configurations
  loglevel: "info"  # Set the log level to "info"

  adminPasswordReset: true  # Enable or disable admin password reset feature

  # Sentry configuration for API
  sentry:
    sentryDsn: ""  # Insert your Sentry DSN (Data Source Name) here
    sentryHttpTracingEnabled: false  # Enable or disable Sentry HTTP tracing
    sentryPostgresTrackingEnabled: false  # Enable or disable Sentry Postgres tracking

  # JWT (JSON Web Token) configuration
  jwt:
    jwtSecret: "changeMe"  # Set the secret key for JWT, replace "changeMe" with a secure key
    jwtRefreshTokenSecret: "changeMe"  # Set the refresh token secret, replace "changeMe" with a secure key
    jwtRefreshTokenExpirationTime: "86400"  # Set the expiration time for JWT refresh tokens in seconds (e.g., 86400 seconds = 1 day)

  s3:
    awsAccessKeyId: ""
    awsSecretAccessKey: ""
    awsRegion: ""
    awsS3Bucket: ""

  wasabi-s3:
    wasabiAccessKeyId: ""
    wasabiSecretAccessKey: ""
    wasabiRegion: ""
    wasabiServiceUrl:
    wasabiS3Bucket: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80
    targetPort: 3000

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

postgresql:
  global:
    ## @param global.imageRegistry Global Docker image registry
    ##
    imageRegistry: ""
    ## @param global.imagePullSecrets Global Docker registry secret names as an array
    ## e.g.
    ## imagePullSecrets:
    ##   - myRegistryKeySecretName
    ##
    imagePullSecrets: []
    ## @param global.storageClass Global StorageClass for Persistent Volume(s)
    ##
    storageClass: ""
    postgresql:
      ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
      ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
      ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
      ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
      ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
      ## @param global.postgresql.auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.replicationPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ##
      auth:
        postgresPassword: ""
        username: ""
        password: ""
        database: ""
        existingSecret: ""
        secretKeys:
          adminPasswordKey: ""
          userPasswordKey: ""
          replicationPasswordKey: ""
      ## @param global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
      ##
      service:
        ports:
          postgresql: ""